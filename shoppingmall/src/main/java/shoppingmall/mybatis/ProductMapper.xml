<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Product">
	
	<resultMap type="Product" id="productMap">
		<id column="product_id" property="product_id"/>
		<result column="product_name" property="product_name"/>
		<result column="price" property="price"/>
		<result column="discount_rate" property="discount_rate"/>
		<result column="product_quantity" property="product_quantity"/>
		<result column="description" property="description"/>
		<result column="regdate" property="regdate"/>
		<result column="play_time" property="play_time"/>
		
		<!-- 1:1 관계인 부모 연계 -->
		<association column="theme_id" property="theme" javaType="Theme" select="Theme.select"/>
		<association column="player_range_id" property="playerRange" javaType="PlayerRange" select="PlayerRange.select"/>
		<association column="age_range_id" property="ageRange" javaType="AgeRange" select="AgeRange.select"/>
		<association column="difficulty_id" property="difficulty" javaType="Difficulty" select="Difficulty.select"/>
		<collection column="product_id" property="productImages" javaType="java.util.List" ofType="ProductImage" select="ProductImage.select"/>
	</resultMap>
	
	<resultMap type="Product" id="productWithReviewsMap" extends="productMap">
		<collection column="product_id" property="reviews" javaType="java.util.List" ofType="Review" select="Review.selectByProductId" />
	</resultMap>
	
	
	<sql id="columns">
		product_id, product_name, price, discount_rate, product_quantity, description, regdate, play_time, theme_id, player_range_id, age_range_id, difficulty_id
	</sql>

	<!-- 모두 가져오기 -->
	<select id="selectAll" resultMap="productMap">
		select * from product
	</select>
	
	<!-- 필터링한 상품 모두 가져오기 -->
	<select id="selectProductByFilter" resultMap="productMap" parameterType="Product">
		select * from product where 1=1
		<if test="theme != null and theme.theme_id > 0">
			and theme_id = #{theme.theme_id}
		</if>
		<if test="playerRange != null and playerRange.player_range_id > 0">
			and player_range_id = #{playerRange.player_range_id}
		</if>
		<if test="ageRange != null and ageRange.age_range_id > 0">
			and age_range_id = #{ageRange.age_range_id}
		</if>
		<if test="difficulty != null and difficulty.difficulty_id > 0">
			and difficulty_id = #{difficulty.difficulty_id}
		</if>
	</select>
	
	<!-- 이름으로 검색한 상품 가져오기 -->
	<select id="selectProductSearchName" parameterType="String" resultMap="productMap">
		select * from product where product_name like concat('%', #{product_name}, '%')
	</select>
	
	<!-- 한 건 가져오기 -->
	<select id="select" parameterType="int" resultMap="productWithReviewsMap">
		select * from product where product_id=#{product_id}
	</select>
	
	<!-- ResultMap 없 한 건 가져오기 -->
	<select id="selectOnlyProduct" parameterType="int" resultType="Product">
		select * from product where product_id=#{product_id}
	</select>
	
	<!-- 베스트셀러: 상품명으로 상품 정보 조회(top4) -->
	<select id="selectTopProductByNames" parameterType="list" resultMap="productMap">
		select * from product where product_name IN
		<foreach item="product_name" collection="list" open="(" separator="," close=")">
			#{product_name}
		</foreach>
		limit 4
	</select>
	
	<!-- 한 건 추가하기 -->
	<insert id="insert" parameterType="Product">
		insert into product(
			product_name, price, discount_rate, product_quantity, description,
			play_time, theme_id, player_range_id, age_range_id, difficulty_id)
		values(#{product_name}, #{price}, #{discount_rate}, #{product_quantity}, #{description},
			#{play_time}, #{theme.theme_id}, #{playerRange.player_range_id}, #{ageRange.age_range_id}, #{difficulty.difficulty_id}
		)
		<selectKey keyColumn="product_id" keyProperty="product_id"
			resultType="int" order="AFTER">
			select last_insert_id() as product_id
		</selectKey>
	</insert>
	
	<!-- 한 건 수정하기 -->
	<update id="update" parameterType="Product">
		update product set
			product_name=#{product_name},
			price=#{price},
			discount_rate=#{discount_rate},
			product_quantity=#{product_quantity},
			description=#{description},
			regdate=#{regdate},
			play_time=#{play_time},
			theme_id=#{theme.theme_id},
			player_range_id=#{playerRange.player_range_id},
			age_range_id=#{ageRange.age_range_id},
			difficulty_id=#{difficulty.difficulty_id}
		where product_id=#{product_id}
			
	</update>
	
	<!-- 한 건 삭제하기 -->
	<delete id="delete" parameterType="int">
	 	delete from product where product_id=#{product_id}
	</delete>
	
	<!--전체 갯수 가져오기 -->
	<select id="totalCount" resultType="int">
		SELECT COUNT(product_id) as total_count FROM product
	</select>
	
	<!--카테고리 기준 전체 갯수 가져오기 -->
	<select id="totalCountByThemeId" parameterType="Theme" resultType="int">
		SELECT COUNT(product_id) as total_count FROM product WHERE theme_id=#{theme_id}
	</select>
	
	<!-- 페이지 기준으로 가져오기 -->
	<select id="selectByPage" parameterType="map" resultMap="productMap">
		SELECT <include refid="columns"/> FROM product ORDER BY regdate DESC LIMIT #{page_size} OFFSET #{offset} 
	</select>
	
	<!-- 카테고리&페이지 기준으로 가져오기 -->
	<select id="selectByThemeWithPage" parameterType="map" resultMap="productMap">	
		SELECT <include refid="columns"/> FROM product WHERE theme_id=#{theme_id} ORDER BY regdate DESC LIMIT #{page_size} OFFSET #{offset} 
	</select>
	
</mapper>